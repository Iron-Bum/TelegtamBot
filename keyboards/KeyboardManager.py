from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from typing import Optional
from datetime import datetime, timedelta
from DataBaseManager import DataBase


class WeekKeyboardManager:
    def __init__(self, start_date: datetime = None):
        if start_date is None:
            today = datetime.now()
            self.start_date = today - timedelta(days=today.weekday())  # –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
        else:
            self.start_date = start_date

    def create_keyboard(self) -> ReplyKeyboardMarkup:
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        days_buttons = []
        for i in range(7):
            day = self.start_date + timedelta(days=i)
            button_text = day.strftime('%d.%m')
            days_buttons.append(KeyboardButton(button_text))
        keyboard.row(*days_buttons)
        keyboard.row(
            KeyboardButton('‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è –Ω–µ–¥–µ–ª—è'),
            KeyboardButton('–°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è ‚û°Ô∏è')
        )
        keyboard.row(KeyboardButton('–û—Ç–º–µ–Ω–∞ üö´'))
        return keyboard

    def go_next_week(self):
        self.start_date += timedelta(days=7)

    def go_prev_week(self):
        self.start_date -= timedelta(days=7)


class DayKeyboardManager:
    def __init__(self, db: DataBase):
        self.db = db  # —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ Database

    def create_time_keyboard(self, date: datetime) -> Optional[ReplyKeyboardMarkup]:
        free_times = self.db.bookings.get_list_free_time(date)
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        buttons = [KeyboardButton(time.strftime('%H:%M')) for time in free_times]
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 4 –≤ —Å—Ç—Ä–æ–∫—É
        if buttons:
            row = []
            for i, button in enumerate(buttons, start=1):
                row.append(button)
                if i % 4 == 0:
                    keyboard.row(*row)
                    row = []
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if row:
                keyboard.row(*row)
            return keyboard
        return None


class CancelKeyboard:
    def __init__(self, db: DataBase):
        self.db = db

    def create_time_keyboard(self, client_id):
        list_time = self.db.bookings.get_client_booking(client_id)
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        buttons = [KeyboardButton(time) for time in list_time]
        if buttons:
            row = []
            for i, button in enumerate(buttons, start=1):
                row.append(button)
                if i % 4 == 0:
                    keyboard.row(*row)
                    row = []
            if row:
                keyboard.row(*row)
            return keyboard
        keyboard.row(KeyboardButton('–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π. üîô'))
        return keyboard
