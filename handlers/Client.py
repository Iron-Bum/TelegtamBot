import sys
import os
from aiogram import types
from keyboards.ClientKeyboard import *
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from keyboards.KeyboardManager import *
from handlers.Start import db
sys.path.append(os.path.join(os.getcwd(), '..'))

manager_dey = DayKeyboardManager(db)


class BookingState(StatesGroup):
    choosing_date = State()
    choosing_time = State()


async def menu(message: types.Message):
    await message.answer(text='–ú–µ–Ω—é', reply_markup=ClientPanel)


async def start_choice_date(message: types.Message, state: FSMContext):
    manager_week = WeekKeyboardManager()
    await state.update_data(start_date=manager_week.start_date.isoformat())
    keyboard = manager_week.create_keyboard()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–µ–¥–µ–ª–∏:", reply_markup=keyboard)
    await BookingState.choosing_date.set()


async def week_navigation_handler(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    start_date_str = user_data.get('start_date')
    start_date = datetime.fromisoformat(start_date_str)
    manager_week = WeekKeyboardManager(start_date)
    text = '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–µ–¥–µ–ª–∏: '
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    if message.text == '–°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è ‚û°Ô∏è':
        manager_week.go_next_week()
    elif message.text == '‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è –Ω–µ–¥–µ–ª—è':
        manager_week.go_prev_week()
    elif message.text == '–û—Ç–º–µ–Ω–∞ üö´':
        await state.finish()
        await message.answer('–ú–µ–Ω—é', reply_markup=ClientPanel)
        return
    else:
        try:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã
            chosen_date_str = f"{message.text}.{datetime.now().year}"
            chosen_date = datetime.strptime(chosen_date_str, "%d.%m.%Y")
            await state.update_data(chosen_date=chosen_date)
            time_kb = manager_dey.create_time_keyboard(chosen_date)
            if time_kb:
                await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è:', reply_markup=time_kb)
                await BookingState.choosing_time.set()
                return
            else:
                text = '–ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å.'
        except Exception as e:
            text = f'–û—à–∏–±–∫–∞ {e}, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É'

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await state.update_data(start_date=manager_week.start_date.isoformat())
    keyboard = manager_week.create_keyboard()
    await message.answer(text, reply_markup=keyboard)


async def day_navigation_handler(message: types.Message, state: FSMContext):
    try:
        user_data = await state.get_data()
        day = user_data.get('chosen_date')
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç datatime
        chosen_datatime_str = f"{day.strftime('%Y-%m-%d')} {message.text}"
        chosen_datatime = datetime.strptime(chosen_datatime_str, "%Y-%m-%d %H:%M")
        await message.answer(f'–ó–∞–ø–∏—Å—å –Ω–∞ {chosen_datatime} –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∞', reply_markup=ClientPanel)
        db.bookings.add_booking(1, 2, chosen_datatime_str)
        await state.finish()
    except ValueError:
        await state.finish()
        await message.answer(text=f'–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ', reply_markup=ClientPanel)
